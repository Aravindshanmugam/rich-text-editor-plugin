/* This file is only used during development to simulate the Appian framework */

const initialParameters = {
  maxSize: 1024,
  placeholder: `Start typing (maxSize is set at 1024)`,
  allowedFormats: [
    "size",
    "bold",
    "italic",
    "underline",
    "strike",
    "color",
    "background",
    "link",
    "align",
    "indent",
    "list"
  ]
};

let reevaluateFn, currentValue, validations;

const Appian = {
  Component: {
    onNewValue: function(callback) {
      reevaluateFn = callback;
      callback(initialParameters);
    },
    saveValue: function(key, value) {
      console.log(`saveValue: ${key} = ${value}`);
      if (!currentValue) {
        currentValue = new Map();
      }
      currentValue.set(key, value);
      logChanges(key, value);
    },
    setValidations: function(newValidations) {
      validations = newValidations;
      console.log(`setValidations: validations = ${validations}`);
      logChanges("validations", validations);
    }
  },
  getAccentColor: function() {
    return "#1e90ff";
  }
};

function logChanges(key, value) {
  let footer = window.document.getElementById("logMessages");
  if (!footer) {
    let newDiv = window.document.createElement("div");
    newDiv.setAttribute("id", "logMessages");
    footer = window.document.body.appendChild(newDiv);
  }
  // footer.style = "display: block; height: 250px; overflow-y: scroll;";
  const logMessage = window.document.createElement("p");
  logMessage.className = "logMessage";
  logMessage.textContent = `> Re-eval on ${new Date()}: ${key} = ${value}`;
  const firstChild = footer.firstChild;
  if (firstChild) {
    footer.insertBefore(logMessage, firstChild);
  } else {
    footer.appendChild(logMessage);
  }
}
